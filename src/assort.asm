include console.inc ; –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤ –∏ –º–∞–∫—Ä–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –í.–ì.–ë–∞—É–ª—ã

.const
    FIXED_MEM_SIZE equ 128 ; —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ (–¥–æ–±–∞–≤–æ–∫ –≤ —Å—Ç–µ–∫–µ)
    RESERVED_MEM_SIZE equ 16 ; –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö (—Å–≤–µ—Ä—Ö—É —Å—Ç–µ–∫–∞)

    STR_TITLE db 'ASSort',0

    CLR_CYAN        equ 3
    CLR_LIGHT_BLUE  equ 9
    CLR_LIGHT_GREEN equ 10
    CLR_LIGHT_RED   equ 12
    CLR_WHITE       equ 15

.data
    arr_size_limit dd 0 ; –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
    char           db ?

.code
    ; —Å—á–∏—Ç–∞—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –≤ –º–∞—Å—Å–∏–≤
    Read_arr proc
        ; –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Å—Å–∏–≤ —Ç–µ–∫—Å—Ç–∞
        @set_arr_text:
            comment *
                –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (4 –±–∞–π—Ç–∞)
            *

            push ebp ; ebp := –±–∞–∑–∞ —Å—Ç–µ–∫–∞
            mov ebp, esp ; esp := —É–∫–∞–∑–∞—Ç–µ–ª—å –≤–µ—Ä—à–∏–Ω—ã —Å—Ç–µ–∫–∞

            comment *
               –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (4 –±–∞–π—Ç–∞)
            *

            xor edi, edi ; edi - –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
            xor ebx, ebx ; ebx - —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ (–±–∞–π—Ç—ã)
            xor ecx, ecx ; ecx - —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (—à—Ç)
        
        ; –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø–∞–º—è—Ç–∏?
        @check_memory:
            mov eax, arr_size_limit
            sub eax, ebx
            cmp eax, RESERVED_MEM_SIZE
            ; arr_size_limit - ebx > RESERVED_MEM_SIZE => @read_chac
            ja @read_char

        ; –≤—ã–¥–µ–ª–∏—Ç—å –ø–∞–º—è—Ç—å
        @allocate_mem:
            mov eax, 2
            mul ebx
            add eax, FIXED_MEM_SIZE ; eax := 2*ebx + FIXED_MEM_SIZE
            jc @err_mem_overflow ; –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –≤—ã–¥–µ–ª–∏—Ç—å –ø–∞–º—è—Ç—å
            mov arr_size_limit, eax ; –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–º—è—Ç–∏
            New eax ; –≤—ã–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ [eax] —Å –∞–¥—Ä–µ—Å–æ–º - eax
            ; comment *
                ConsoleMode ; CP866 -> CP1251
                SetTextAttr CLR_CYAN
                OutStr "–ê–¥—Ä–µ—Å –Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Ç–µ–∫—Å—Ç–∞: "
                OutIntLn edi
                OutStr "–ê–¥—Ä–µ—Å –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Ç–µ–∫—Å—Ç–∞: " 
                OutIntLn eax ; –¢–ï–ü–ï–†–¨ eax - –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Ç–µ–∫—Å—Ç–∞
                OutStrLn
                ConsoleMode ; CP1251 -> CP866
            ; *
           
        xor esi, esi ; –¢–ï–ü–ï–†–¨ esi - —Å—á—ë—Ç—á–∏–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∞–π—Ç
        ; –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
        @copy_arr:
            cmp esi, ebx 
            jae @copied_arr

            ; –Ω–∞—á–∞–ª–æ —Å—Ç–∞—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ + —Å–º–µ—â–µ–Ω–∏–µ ->
            ; -> –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ + —Å–º–µ—â–µ–Ω–∏–µ
            mov edx, [edi+esi]
            mov [eax+esi], edx

            add esi, 4
            jmp @copy_arr
        
        ; –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
        @copied_arr:
            xor esi, esi
            xor edx, edx

            mov edi, eax ; –¢–ï–ü–ï–†–¨ edi - –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
            Dispose eax

        @read_char:
            xor eax, eax

            SetTextAttr CLR_LIGHT_BLUE
            InChar char ; –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª
            movzx esi, char ; –¢–ï–ü–ï–†–¨ esi - –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
            OutStrLn

        @parse_char:
            ; –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            @@ignore_char:
                cmp esi, 0 ; –∏–≥–Ω–æ—Ä üòÇ
                je @read_char
                cmp esi, 10 ; –∏–≥–Ω–æ—Ä –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
                je @read_char

                cmp esi, 92 ; –∏–≥–Ω–æ—Ä –±—ç–∫—Å–ª–µ—à–∞
                jne @@does_text_end
                InChar char
                OutStrLn
                jmp @read_char

            ; –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞ -:fin:-
            @@does_text_end:
                cmp byte ptr [esp+20], '-'
                jne @@does_sentence_end
                cmp byte ptr [esp+16], ':'
                jne @@does_sentence_end
                cmp byte ptr [esp+12], 'f'
                jne @@does_sentence_end
                cmp byte ptr [esp+8], 'i'
                jne @@does_sentence_end
                cmp byte ptr [esp+4], 'n'
                jne @@does_sentence_end
                cmp byte ptr [esp], ':'
                jne @@does_sentence_end
                cmp esi, '-'
                jne @@does_sentence_end

                xor esi, esi
                jmp @read_arr_end

            ; –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            @@does_sentence_end:
                cmp esi, '.'
                je @@@sentence_ends
                cmp esi, '!'
                je @@@sentence_ends
                cmp esi, '?'
                je @@@sentence_ends
                jmp @@insert_char
                ; –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                @@@sentence_ends:
                    push 0
                    xor esi, esi
                    add ebx, 4
                    inc ecx
                    jmp @@debug_1

            ; –≤—Å—Ç–∞–≤–∫–∞ —Å–∏–º–≤–æ–ª –≤ –º–∞—Å—Å–∏–≤
            @@insert_char:
                push esi
                xor esi, esi
                add ebx, 4
                jmp @@debug_1

            ; –æ—Ç–ª–∞–¥–∫–∞
            @@debug_1:
                ; comment *
                    ConsoleMode ; —Å–º–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ CP866 –Ω–∞ CP1251
                    SetTextAttr CLR_CYAN
                    OutStr "–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ —Ç–µ–∫—Å—Ç–∞: "
                    OutInt ebx
                    OutChar '/'
                    OutIntLn arr_size_limit

                    OutStr "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: " 
                    OutIntLn ecx

                    OutStr '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–µ–∫–∞: '
                    OutChar byte ptr [esp+28]
                    OutChar ' '
                    OutChar byte ptr [esp+24]
                    OutChar ' '
                    OutChar byte ptr [esp+20]
                    OutChar ' '
                    OutChar byte ptr [esp+16]
                    OutChar ' '
                    OutChar byte ptr [esp+12]
                    OutChar ' '
                    OutChar byte ptr [esp+8]
                    OutChar ' '
                    OutChar byte ptr [esp+4]
                    OutStrLn
                    ConsoleMode ; —Å–º–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ CP1251 –Ω–∞ CP866 *

                jmp @check_memory

        ; –æ—à–∏–±–∫–∞ - –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        @err_mem_overflow:
            ConsoleMode ; CP866 -> CP1251
            SetTextAttr CLR_LIGHT_RED
            OutStrLn 'ERR1: –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏'
            SetTextAttr CLR_WHITE
            ConsoleMode ; CP1251 -> CP688

            Dispose edi ; –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            mov esp, ebp
            pop ebp

            exit 1

        ; –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
        @read_arr_end:
            mov arr_size_limit, ebx

            mov esp, ebp
            pop ebp

            ret 0
    Read_arr endp

    Sort_arr proc
        ; –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Å—Å–∏–≤ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –Ω–∞—á–∞–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        @set_arr_char:
            New ecx ; –≤—ã–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ [e—Åx] —Å –∞–¥—Ä–µ—Å–æ–º - eax
            mov esi, eax ; –∞–¥—Ä–µ—Å –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤–∞ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –Ω–∞—á–∞–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            xor eax, eax
                ; comment *
                    ConsoleMode ; —Å–º–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ CP866 –Ω–∞ CP1251
                    SetTextAttr CLR_CYAN
                    OutStr "–ê–¥—Ä–µ—Å –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤–∞ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –ø–µ—Ä–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: " 
                    OutIntLn esi
                    OutStr "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: " 
                    OutIntLn ecx
                    ConsoleMode ; —Å–º–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ CP1251 –Ω–∞ CP866
                ; *

            push ebp
            mov ebp, esp

        ; –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤
        @fill_arr:
            add eax, edi
            cmp byte ptr [eax], 0
            jne @fill_arr
            push eax
            sub eax, edi
            add eax, 4
            loop @fill_arr
        mov ecx, edx

        @sort_arr:
            mov ecx, edx
            
        ret
    Sort_arr endp 

    Print_arr proc
        exit 1
        ret
    Print_arr endp 

    ; —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_1:
        mov eax, 0
        mov ebx, 0
        mov ecx, 0
        mov edx, 0
        mov esi, 0
        mov edi, 0

    start:
        set_console:
            ClrScr
            SetTextAttr CLR_CYAN

        call Read_arr

        call Sort_arr

        call Print_arr

        exit 0

    end start